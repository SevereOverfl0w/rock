#+TITLE: CodeDeploy Arch Package
#+PROPERTY: header-args :var region="eu-west-1", bucket="aws-codedeploy-eu-west-1", version="latest/VERSION"

* Getting the install script
Amazon say to install Ruby, wget and then download an installation script from a
region-specific bucket.

In our case we want to start by pulling down the install script to see what it
does.

#+BEGIN_SRC shell
  curl https://aws-codedeploy-eu-central-1.s3.amazonaws.com/latest/install > install.rb
#+END_SRC

#+RESULTS:

The installation script is written in Ruby, and will be downloaded to
[[file:install.rb][install.rb]]. I've added it to the repo so we can keep track of any changes that
may occur in future more easily.

* Poking around
[[https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-ubuntu.html][Amazon's docs]] recommend running the following to install CodeDeploy:

#+BEGIN_SRC shell
sudo apt-get update
sudo apt-get install ruby # Or ruby2.0 on older versions of Ubuntu.
sudo apt-get install wget
cd /home/ubuntu
wget https://bucket-name.s3.amazonaws.com/latest/install
chmod +x ./install
sudo ./install auto
#+END_SRC

The install script checks you have a supported Ruby version where it currently
supports the following versions:

#+BEGIN_SRC shell :results output verbatim
  grep -A 2 'def supported_ruby_versions' install.rb
#+END_SRC

#+RESULTS:
:   def supported_ruby_versions
:     ['2.4', '2.3', '2.2', '2.1', '2.0']
:   end

The script may have to be run inside AWS because it looks up availability zones
etc. via a self-assigned (so that hosts can communicate without DHCP)
~169.254.169.254~ address.

There's one big script wrapped inside a ~begin/rescue~ block. Methods are
defined outside of any explicit class.

The ~auto~ argument runs code that will try to detect the OS package manager,
which it sets via ~@type = "rpm"~ etc.

Ultimately, ~install_from_s3~ is called with a region, bucket, version file key,
and some additional optional arguments.

#+BEGIN_SRC shell :results output verbatim
  grep -B 1 'install_from_s3' install.rb | tail -n +3 # To get rid of the def install_from_s3
#+END_SRC

#+RESULTS:
: --
:       install_cmd = ['/usr/bin/yum', '-y', 'localinstall']
:       install_from_s3(region, bucket, version_file_key, @type, install_cmd)
: --
:       install_cmd = ['/usr/bin/gdebi', '-n', '-o', 'Dpkg::Options::=--force-confdef', '-o', 'Dkpg::Options::=--force-confold']
:       install_from_s3(region, bucket, version_file_key, @type, install_cmd)
: --
:     install_cmd = ['/usr/bin/zypper', 'install', '-n']
:     install_from_s3(region, bucket, version_file_key, 'rpm', install_cmd)

** Getting CodeDeploy version info
#+BEGIN_SRC ruby
  region = get_region
  bucket = "aws-codedeploy-#{region}"
  version_file_key = 'latest/VERSION'
#+END_SRC

#+BEGIN_SRC ruby
  def get_region
    @log.info('Checking AWS_REGION environment variable for region information...')
    region = ENV['AWS_REGION']
    return region if region

    @log.info('Checking EC2 metadata service for region information...')
    region = get_ec2_metadata_region
    return region if region

    @log.info('Using fail-safe default region: us-east-1')
    return 'us-east-1'
  end
#+END_SRC

There's a version file we want to get our hands on.

#+BEGIN_SRC shell :results output verbatim
  curl https://$bucket.s3-$region.amazonaws.com/$version | jq .
#+END_SRC

#+RESULTS:
: {
:   "rpm": "releases/codedeploy-agent-1.0-1.1458.noarch.rpm",
:   "deb": "releases/codedeploy-agent_1.0-1.1458_all.deb",
:   "msi": "releases/codedeploy-agent-1.0.1.1458.msi"
: }

** Debian package
Let's download the Debian pkg and see what's inside!

#+BEGIN_SRC shell :results output raw
  echo https://$bucket.s3-$region.amazonaws.com/releases/codedeploy-agent_1.0-1.1458_all.deb
#+END_SRC

#+NAME: debian-url
#+RESULTS:
https://aws-codedeploy-eu-west-1.s3-eu-west-1.amazonaws.com/releases/codedeploy-agent_1.0-1.1458_all.deb

#+BEGIN_SRC shell
  curl https://$bucket.s3-$region.amazonaws.com/releases/codedeploy-agent_1.0-1.1458_all.deb > codedeploy-agent.deb
#+END_SRC

#+RESULTS:

Inside the Debian package there's a ~data.tar.gz`~ archive with all the
CodeDeploy code inside.

*** Listing contents
#+BEGIN_SRC shell :results output verbatim
  ar -x codedeploy-agent.deb
  # We only need the data.tar.gz
  rm control.tar.gz debian-binary
  tar -tvf data.tar.gz
  rm data.tar.gz
#+END_SRC
